<% title = `siMeja - ${buildingName}` -%>
<%# The layout line is commented out, assuming it's part of your project structure %>
<%# layout('layout') -%>

<div class="place-detail-container">
    <a href="/" class="back-button">
        <span class="material-symbols--arrow-back-ios-new-rounded"></span>
        <span>kembali</span>
    </a>

    <header class="place-detail-header">
        <%# Display the building name passed from the server %>
        <h2><%= buildingName %></h2>

        <div class="availability-legend">
            <%# Dynamically display the count of available desks %>
            <div class="legend-item">
                <span class="color-box available"></span>
                <span class="count"><%= availableCount %></span>
                <span>Tersedia</span>
            </div>
             <%# Dynamically display the count of occupied desks %>
            <div class="legend-item">
                <span class="color-box occupied"></span>
                <span class="count"><%= occupiedCount %></span>
                <span>Terisi</span>
            </div>
        </div>
    </header>


    <main class="floors-container">
        <%# Loop through each floor in the 'floors' object %>
        <% Object.keys(floors).sort().forEach(floorNumber => { %>
            <% const desksOnFloor = floors[floorNumber]; %>
            
            <section class="floor-section">
                <h3>LANTAI <%= floorNumber %></h3>
                <div class="seat-grid">
                    
                    <%# Loop through each desk on the current floor %>
                    <% desksOnFloor.forEach(desk => { %>
                        
                        <%# Set the class to 'available' or 'occupied' based on deskStatus %>
                        <div class="seat-box <%= desk.deskStatus.toLowerCase() %>">
                            <span class="seat-label">No.</span>
                            
                            <%# Display the desk ID, padded with a leading zero if needed %>
                            <span class="seat-number"><%= String(desk.deskID).padStart(2, '0') %></span>
                        </div>
                        
                    <% }); %>
                </div>
            </section>
            
        <% }); %>
    </main>
</div>

<% // layout('layout') -%>
<% title = `siMeja - ${buildingName}` -%>

<script>
    /**
     * This function fetches the latest desk data from the server and updates the UI.
     * It's designed to be called repeatedly by setInterval.
     */
    async function refreshDeskData() {
        // Find the building name from the page's h2 element.
        const buildingHeader = document.querySelector('.place-detail-header h2');
        
        // Gracefully stop if the header element isn't found, to prevent errors.
        if (!buildingHeader) {
            console.error("Could not find the building header element. Auto-refresh stopped.");
            if (window.refreshIntervalId) {
                clearInterval(window.refreshIntervalId);
            }
            return; 
        }

        // Format the building name for the API URL (e.g., "GKU 1" becomes "gku-1").
        const buildingName = buildingHeader.textContent;
        const buildingSlug = buildingName.toLowerCase().replace(/ /g, '-');

        try {
            console.log(`[${new Date().toLocaleTimeString()}] Refreshing data for ${buildingName}...`);

            // Call the API endpoint to get the latest data.
            const response = await fetch(`/api/building/${buildingSlug}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();

            // --- 1. Update the Header Counts (Tersedia / Terisi) ---
            const availableCountEl = document.querySelector('.availability-legend .legend-item:first-child .count');
            const occupiedCountEl = document.querySelector('.availability-legend .legend-item:last-child .count');
            
            if (availableCountEl) availableCountEl.textContent = data.availableCount;
            if (occupiedCountEl) occupiedCountEl.textContent = data.occupiedCount;

            // --- 2. Update the Color of Each Seat Box ---
            // Loop through every desk in the received data.
            Object.values(data.floors).flat().forEach(desk => {
                // Find the corresponding seat-box element on the page by its unique ID.
                const seatBox = document.getElementById(`desk-${desk.deskID}`);
                
                if (seatBox) {
                    const newStatus = desk.deskStatus.toLowerCase(); // 'available' or 'occupied'
                    
                    // This is the key part for changing colors:
                    // Remove both possible color classes, then add the correct new one.
                    seatBox.classList.remove('available', 'occupied');
                    seatBox.classList.add(newStatus);
                }
            });

        } catch (error) {
            console.error("Failed to refresh desk data:", error);
        }
    }

    /**
     * This ensures the script runs only after the entire HTML page has been loaded and is ready.
     * This prevents "document.querySelector(...) is null" errors.
     */
    document.addEventListener('DOMContentLoaded', () => {
        // --- Initial Setup on Page Load ---
        // Go through each seat-box once and give it a unique ID based on its number.
        // This makes it much faster to find and update them later.
        document.querySelectorAll('.seat-box').forEach(seatBox => {
            const seatNumberEl = seatBox.querySelector('.seat-number');
            if(seatNumberEl) {
                const seatNumber = seatNumberEl.textContent;
                seatBox.id = `desk-${parseInt(seatNumber, 10)}`;
            }
        });

        // --- Start the Auto-Refresh ---
        // Call the function once immediately to get the initial data.
        refreshDeskData();
        // Set an interval to automatically call the function every 10 seconds.
        window.refreshIntervalId = setInterval(refreshDeskData, 1000);
    });
</script>